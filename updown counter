module up_down_counter (clk, rst, UpDwn, count);
input clk, rst;
input  UpDwn ; // UpDwn = 1 for Up counter and 0 for Down Counter
output [7:0] count;
reg [7:0] count = 0; // initially counter set to 0
 
always @ (posedge clk )
begin
if (rst)
count <= 0;
end

always @( posedge clk )
begin
if (UpDwn == 1 && count >= 0  && count <= 255)
count = count + 1;
else if ( UpDwn == 0 && count >= 0 && count <=255) 
count = count - 1;
end
endmodule


testbench

module sim;
reg CLK, RST, UpDwn;
wire [7:0] COUNT;

up_down_counter testcounter (.clk(CLK), .rst(RST), .UpDwn(UpDwn), .count(COUNT));

initial 
begin CLK = 0;
forever #10 CLK = ~CLK; 
end

initial
begin
RST = 1; 
#15; 

RST =0;
#15;

UpDwn = 0;
#200;

UpDwn = 1;
#75;

RST = 1;
#15;

RST=0;
#15;
$finish;
end
endmodule



Mode	Count	Q2	Q1	Q0
0	0	0	0	0
0	1	0	0	1
0	2	0	1	0
0	3	0	1	1
1	3	0	1	1
1	2	0	1	0
1	1	0	0	1
1	0	0	0	0
